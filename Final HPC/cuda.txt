#include<stdio.h>
#include<cuda.h>


__global__ void vectoradd(int *d,int *e,int *f)
{
    int id=blockIdx.x;
    f[id]=d[id]+e[id];
}

int main()
{
    int a[6]={1,2,3,4,5,6};
    int b[6]={6,5,4,3,2,1};
    int c[6];
 
    int *d,*e,*f;
 
    for(int i=0;i<6;i++)
    {
        scanf("%d",&a[i]);
    }
    for(int i=0;i<6;i++)
    {
        scanf("%d",&b[i]);
    }

    cudaMalloc((void **)&d,6*sizeof(int));
    cudaMalloc((void **)&e,6*sizeof(int));
    cudaMalloc((void **)&f,6*sizeof(int));
 
    cudaMemcpy(d,a,6*sizeof(int),cudaMemcpyHostToDevice);
    cudaMemcpy(e,b,6*sizeof(int),cudaMemcpyHostToDevice);
 
    vectoradd<<<6,1>>>(d,e,f);
 
    cudaMemcpy(c,f,6*sizeof(int),cudaMemcpyDeviceToHost);
 
    for(int i=0;i<6;i++)
    {
        printf("%d ",c[i]);
    }
 
    cudaFree(d);
    cudaFree(e);
    cudaFree(f);
 
    return 0;
}









==================================================
















#include<stdio.h>
#include<cuda.h>


__global__ void matrixMult(int *d,int *e,int *f,int row1,int col1,int row2,int col2)
{
    int x=blockIdx.x;
    int y=blockIdx.y;
    
    f[col2*y+x]=0;
    for(int k=0;k<col1;k++)
    {
        f[col2*y+x]=f[col2*y+x]+d[col1*y+k]*e[col2*k+x];
    }
}
int main()
{
    int row1=3;
    int col1=3;
    int row2=3;
    int col2=3;

    int mat1[row1][col1]={{1,2,3},{1,2,3},{1,2,3}};
    int mat2[row2][col2]={{1,2,3},{1,2,3},{2,1,3}};
    int mat3[row1][col2];

    int *d,*e,*f;

    cudaMalloc((void **)&d,row1*col1*sizeof(int));
    cudaMalloc((void **)&e,row2*col2*sizeof(int));
    cudaMalloc((void **)&f,row1*col2*sizeof(int)); 

    cudaMemcpy(d,mat1,row1*col1*sizeof(int),cudaMemcpyHostToDevice);
    cudaMemcpy(e,mat2,row2*col2*sizeof(int),cudaMemcpyHostToDevice);
 
    dim3 grid(col2,row1);
 
    matrixMult<<<grid,1>>>(d,e,f,row1,col1,row2,col2);

    cudaMemcpy(mat3,f,row1*col2*sizeof(int),cudaMemcpyDeviceToHost);
 
    for(int i=0;i<row1;i++)
    {
        for(int j=0;j<col2;j++)
        {
            printf("%d ",mat3[i][j]);
        }
        printf("\n");
    }
 
    cudaFree(d);
    cudaFree(e);
    cudaFree(f);
    
    return 0;
}